#!/bin/bash

# ==============================================
# StudentCertDApp Contract Deployment Script
# ==============================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CONTRACT_NAME="certificate"
SCRIPTS_DIR="$(dirname "$0")"
PROJECT_ROOT="$(dirname "$SCRIPTS_DIR")"
CONTRACTS_DIR="$PROJECT_ROOT/contracts"
DEPLOYMENTS_DIR="$PROJECT_ROOT/deployments"

# Create deployments directory if it doesn't exist
mkdir -p "$DEPLOYMENTS_DIR"

echo -e "${BLUE}🎓 StudentCertDApp Contract Deployment${NC}"
echo "====================================="

# Check if required environment variables are set
if [ -z "$DEPLOYER_PRIVATE_KEY" ]; then
    echo -e "${RED}❌ Error: DEPLOYER_PRIVATE_KEY environment variable is required${NC}"
    echo "Generate a key with: npx @stacks/cli make_keychain -t"
    exit 1
fi

# Set network (default to testnet)
NETWORK=${STACKS_NETWORK:-testnet}
echo -e "${BLUE}📡 Network: ${NETWORK}${NC}"

# Validate network
if [ "$NETWORK" != "testnet" ] && [ "$NETWORK" != "mainnet" ]; then
    echo -e "${RED}❌ Error: NETWORK must be either 'testnet' or 'mainnet'${NC}"
    exit 1
fi

# Check if contract file exists
CONTRACT_FILE="$CONTRACTS_DIR/$CONTRACT_NAME.clar"
if [ ! -f "$CONTRACT_FILE" ]; then
    echo -e "${RED}❌ Error: Contract file not found at $CONTRACT_FILE${NC}"
    exit 1
fi

echo -e "${GREEN}📄 Contract file found: $CONTRACT_FILE${NC}"

# Check if TypeScript deployment script exists
DEPLOY_SCRIPT="$SCRIPTS_DIR/deploy.ts"
if [ ! -f "$DEPLOY_SCRIPT" ]; then
    echo -e "${RED}❌ Error: Deploy script not found at $DEPLOY_SCRIPT${NC}"
    exit 1
fi

# Check for Node.js and npm
if ! command -v node &> /dev/null; then
    echo -e "${RED}❌ Error: Node.js is required but not installed${NC}"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    echo -e "${RED}❌ Error: npm is required but not installed${NC}"
    exit 1
fi

# Install dependencies if needed
echo -e "${YELLOW}⏳ Checking dependencies...${NC}"
if [ ! -d "$PROJECT_ROOT/node_modules" ]; then
    echo -e "${YELLOW}📦 Installing dependencies...${NC}"
    cd "$PROJECT_ROOT"
    npm install
    cd - > /dev/null
fi

# Run pre-deployment checks
echo -e "${YELLOW}🔍 Running pre-deployment checks...${NC}"

# Check if Clarinet is available for contract validation
if command -v clarinet &> /dev/null; then
    echo -e "${BLUE}✓ Running Clarinet syntax check...${NC}"
    cd "$PROJECT_ROOT"
    if ! clarinet check; then
        echo -e "${RED}❌ Contract syntax check failed${NC}"
        exit 1
    fi
    echo -e "${GREEN}✅ Contract syntax check passed${NC}"
    cd - > /dev/null
else
    echo -e "${YELLOW}⚠️  Clarinet not found, skipping syntax check${NC}"
fi

# Estimate deployment cost (testnet is free, mainnet has costs)
if [ "$NETWORK" = "mainnet" ]; then
    echo -e "${YELLOW}💰 Deploying to mainnet will incur transaction fees${NC}"
    echo -e "${YELLOW}   Make sure your deployment address has sufficient STX${NC}"
    echo -n "Continue with mainnet deployment? (y/N): "
    read -r confirmation
    if [ "$confirmation" != "y" ] && [ "$confirmation" != "Y" ]; then
        echo -e "${YELLOW}Deployment cancelled${NC}"
        exit 0
    fi
fi

# Set environment variables for the deployment script
export STACKS_NETWORK="$NETWORK"
export CONTRACT_NAME="$CONTRACT_NAME"

# Run the TypeScript deployment script
echo -e "${BLUE}🚀 Starting deployment...${NC}"
echo "Contract: $CONTRACT_NAME"
echo "Network: $NETWORK"
echo "----------------------------------------"

cd "$PROJECT_ROOT"
if npx ts-node "$DEPLOY_SCRIPT"; then
    echo "----------------------------------------"
    echo -e "${GREEN}✅ Deployment completed successfully!${NC}"
    
    # Check if deployment info was saved
    DEPLOYMENT_FILE="$DEPLOYMENTS_DIR/${NETWORK}-deployment.json"
    if [ -f "$DEPLOYMENT_FILE" ]; then
        echo -e "${GREEN}💾 Deployment info saved to: $DEPLOYMENT_FILE${NC}"
        
        # Extract key information
        if command -v jq &> /dev/null; then
            CONTRACT_ADDRESS=$(jq -r '.contractAddress' "$DEPLOYMENT_FILE")
            TX_ID=$(jq -r '.txId' "$DEPLOYMENT_FILE")
            
            echo ""
            echo -e "${BLUE}📋 Deployment Summary:${NC}"
            echo "Contract Address: $CONTRACT_ADDRESS"
            echo "Transaction ID: $TX_ID"
            
            # Generate environment variables for frontend
            ENV_FILE="$PROJECT_ROOT/frontend/.env.local.new"
            echo "# Generated by deployment script on $(date)" > "$ENV_FILE"
            echo "NEXT_PUBLIC_STACKS_NETWORK=$NETWORK" >> "$ENV_FILE"
            echo "NEXT_PUBLIC_CONTRACT_ADDRESS=${CONTRACT_ADDRESS%.*}" >> "$ENV_FILE"
            echo "NEXT_PUBLIC_CONTRACT_NAME=$CONTRACT_NAME" >> "$ENV_FILE"
            
            if [ "$NETWORK" = "testnet" ]; then
                echo "NEXT_PUBLIC_STACKS_API_URL=https://stacks-node-api.testnet.stacks.co" >> "$ENV_FILE"
            else
                echo "NEXT_PUBLIC_STACKS_API_URL=https://stacks-node-api.mainnet.stacks.co" >> "$ENV_FILE"
            fi
            
            echo -e "${GREEN}🔧 Frontend environment variables generated: $ENV_FILE${NC}"
            echo -e "${YELLOW}   Copy these to your frontend/.env.local file${NC}"
        fi
    fi
    
    # Post-deployment instructions
    echo ""
    echo -e "${BLUE}📝 Next Steps:${NC}"
    echo "1. Update your frontend .env.local with the new contract address"
    echo "2. Register institutions using the register-institution function"
    echo "3. Test certificate issuance and verification"
    echo "4. Consider registering a sample institution for testing"
    
    if [ "$NETWORK" = "testnet" ]; then
        echo "5. Get testnet STX from the faucet: https://explorer.stacks.co/sandbox/faucet"
    fi
    
else
    echo -e "${RED}❌ Deployment failed${NC}"
    echo "Check the error messages above for details"
    exit 1
fi

cd - > /dev/null

echo -e "${GREEN}🎉 Script completed successfully!${NC}"